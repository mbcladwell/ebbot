(define-module (ebbot mastsoc) 
 #:use-module (ebbot env)
 #:use-module (web client)
 #:use-module (srfi srfi-19) ;; date time
 #:use-module (srfi srfi-1)  ;;list searching; delete-duplicates in list 
 #:use-module (srfi srfi-9)  ;;records
 #:use-module (web response)
 #:use-module (web request)
 #:use-module (oop goops) ;; class-of
 #:use-module (web uri)
 #:use-module (web client)
 #:use-module (web http)
 #:use-module (ice-9 rdelim)
 #:use-module (ice-9 i18n)   ;; internationalization
 #:use-module (ice-9 popen)
 #:use-module (ice-9 regex) ;;list-matches
 #:use-module (ice-9 receive)	     
 #:use-module (ice-9 string-fun)  ;;string-replace-substring
 #:use-module (ice-9 pretty-print)
 #:use-module (json)
 #:use-module (rnrs bytevectors)
 #:use-module (ice-9 textual-ports)
 #:use-module (ebbot image)
 #:export (
	   mast-post-toot-curl
	   ))


(define *oauth-consumer-key* (@@ (ebbot env) *oauth-consumer-key*))
(define *oauth-consumer-secret* (@@ (ebbot env) *oauth-consumer-secret*))
(define *bearer-token* (@@ (ebbot env) *bearer-token*))  ;;this does not change
(define *oauth-access-token* (@@ (ebbot env) *oauth-access-token*))
(define *oauth-token-secret* (@@ (ebbot env) *oauth-token-secret*))
(define *client-id* (@@ (ebbot env) *client-id*))
(define *client-secret* (@@ (ebbot env) *client-secret*))



;;curl -v -H 'Authorization: Bearer dFe6j-65kVREIqyJs7RSmn23GeFBEU4_Qb2Nln_z_Lw' -X POST -H 'Content-Type: multipart/form-data' https://mastodon.social/api/v2/media --form file='@/home/mbc/projects/babdata/archive/fakenewshist.jpeg'
(define (mast-post-image-curl i)
  (let*(
	(bearer (string-append "'Authorization: Bearer " *bearer-token* "'"))
	(image (string-append "file='@" i "'"))
	(out-file (get-rand-file-name "f" "txt"))
	(command (string-append "curl -o " out-file " -X POST -H " bearer " -H 'Content-Type: multipart/form-data' https://mastodon.social/api/v2/media --form " image))
	(_ (system command))
	(_ (sleep 5))
	(p  (open-input-file out-file))
	(lst  (json-string->scm (get-string-all p)))
;;      	(in (open-pipe*  OPEN_READ "curl" "-v" "-o" out-file "-H" bearer "-X" "POST" "-H" "'Content-Type: multipart/form-data'" "https://mastodon.social/api/v2/media" "--form" image))
	(id (assoc-ref lst "id"))
      )
  id  ))



;; (define (mast-post-toot-curl t i)
;;   (let*((media-id (mast-post-image-curl i))
;; 	(media (string-append "' -F 'media_ids[]=" media-id "'"))
;; 	(pref "curl https://mastodon.social/api/v1/statuses -H 'Authorization: Bearer dFe6j-65kVREIqyJs7RSmn23GeFBEU4_Qb2Nln_z_Lw' -F 'status=")
;; 	(suff "'")
;; 	(command (string-append pref t media))
;; 	(_ (pretty-print command))
;; 	)
;;   (system command)  )
;;   )


(define (mast-post-toot-curl t i)
  (let*((media-id (mast-post-image-curl i))
	(status (string-append " -F 'status=" t "'"))
	(pref "curl https://mastodon.social/api/v1/statuses -H 'Authorization: Bearer dFe6j-65kVREIqyJs7RSmn23GeFBEU4_Qb2Nln_z_Lw' -F 'media_ids[]=")
	(suff "'")
	(command (string-append pref media-id status))
	(_ (pretty-print command))
	)
  (system command)  )
  )

;; curl -X POST \
;; 	-F 'client_id=your_client_id_here' \
;; 	-F 'client_secret=your_client_secret_here' \
;; 	-F 'redirect_uri=urn:ietf:wg:oauth:2.0:oob' \
;; 	-F 'grant_type=authorization_code' \
;; 	-F 'code=user_authzcode_here' \
;; 	-F 'scope=read write push' \
;; 	https://mastodon.example/oauth/token


(define (mastadon-get-access-post)
;;I already have the authorization code - now get access code
  (let* ((url "https://mastodon.social/oauth/token?")
	 (client-id *client-id*)
	 (suffix "&scope=write:statuses&redirect_uri=urn:ietf:wg:oauth:2.0:oob&response_type=code")
(full-url (string-append url client-id suffix))
	 )
     (receive (response body)	  
	 (http-post full-url )
;;       (pretty-print (json-string->scm (utf8->string body))))
       (pretty-print (json-string->scm  body)))
    )

  )

